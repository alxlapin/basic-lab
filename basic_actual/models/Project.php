<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "project".
 *
 * @property string $id
 * @property string $project_title
 * @property string $project_announce
 * @property string $project_desc
 * @property string $project_price
 * @property integer $project_status
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property Publication[] $publications
 * @property Store[] $stores
 * @property Post[] $posts
 * @property User[] $authors
 */
class Project extends \yii\db\ActiveRecord
{

    const STATUS_INDEV = 0;
    const STATUS_READY = 1;
    const STATUS_OLD = 2;

    public $authorIds = [];

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        UserProject::deleteAll(['project_id' => $this->id]);
        if (!empty($this->authorIds)) {
            $authorIdsValues = [];
            foreach ($this->authorIds as $authorId) {
                $authorIdsValues[] = [(int) $authorId, $this->id];
            }
            Yii::$app->db->createCommand()->batchInsert(UserProject::tableName(), ['user_id', 'project_id'], $authorIdsValues)->execute();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'project';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['project_title', 'project_announce', 'project_desc', 'project_status'], 'required'],
            [['project_announce', 'project_desc'], 'string'],
            [['project_price'], 'number'],
            [['project_status'], 'integer'],
            [['project_title'], 'string', 'max' => 255],
            [['authorIds'], 'safe'],
            [['authorIds'], 'required'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'project_title' => 'Название проекта',
            'project_announce' => 'Анонс Проекта',
            'project_desc' => 'Описание проекта',
            'project_price' => 'Цена',
            'project_status' => 'Статус',
            'created_at' => 'Дата создания',
            'updated_at' => 'Отредактирован',
            'authorIds' => 'Авторы проекта',
            'authors' => 'Авторы'
        ];
    }

    public function getStatusName() {
        return ArrayHelper::getValue(self::getStatusesArray(), $this->project_status);
    }

    public static function getStatusesArray() {
        return [
            self::STATUS_INDEV => 'В разработке',
            self::STATUS_READY => 'В производстве',
            self::STATUS_OLD => 'Устарел',
        ];
    }

    public static function getTitles() {
        return ArrayHelper::map(self::find()->asArray()->all(), 'id', 'project_title');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPosts()
    {
        return $this->hasMany(Post::className(), ['post_project_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPublications()
    {
        return $this->hasMany(Publication::className(), ['project_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStores()
    {
        return $this->hasMany(Store::className(), ['project_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthors()
    {
        return $this->hasMany(User::className(), ['id' => 'user_id'])->viaTable('user_project', ['project_id' => 'id']);
    }

    public function provideAuthors() {
        $this->authorIds = ArrayHelper::getColumn($this->getAuthors()->all(), 'id');
    }

}
