<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "publication".
 *
 * @property string $id
 * @property string $project_id
 * @property string $public_date
 * @property integer $public_type
 * @property string $public_title
 * @property string $public_annotation
 * @property string $public_info
 * @property string $public_lang
 * @property string $public_file
 *
 * @property Project $project
 * @property PublicationKeyword[] $publicationKeywords
 * @property Keyword[] $keywords
 * @property UserPublication[] $userPublications
 * @property User[] $authors
 */
class Publication extends \yii\db\ActiveRecord
{
    public $month;
    public $year;

    /**
     * @var UploadedFile
     */
    public $attach;

    public $authorIds = [];
    public $keywordNames = [];

    const TYPE_ARTICLE = 0;
    const TYPE_CHAPTER = 1;
    const TYPE_BOOK = 2;

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            if ($insert) {
                if ($this->attach) {
                    $attachPath = '/documents/publications/' . uniqid(time()) . '.' . $this->attach->extension;
                    $this->attach->saveAs(Yii::getAlias("@webroot") . $attachPath);
                    $this->public_file = $attachPath;
                }
            } else {
                if ($this->attach) {
                    $checkFile = Yii::getAlias("@webroot") . $this->public_file;
                    if (file_exists($checkFile)) {
                        unlink($checkFile);
                    }
                    $attachPath = '/documents/publications/' . uniqid(time()) . '.' . $this->attach->extension;
                    $this->attach->saveAs(Yii::getAlias("@webroot") . $attachPath);
                    $this->public_file = $attachPath;
                }
            }
            $this->public_date = (new \DateTime($this->year . '-' . $this->month . '-' . '01'))->format('Y-m-d');
            return true;
        }
        return false;
    }

    public function afterSave($insert, $changedAttributes)
    {
        UserPublication::deleteAll(['public_id' => $this->id]);
        PublicationKeyword::deleteAll(['public_id' => $this->id]);
        if (!empty($this->authorIds)) {
            $authorIdsValues = [];
            foreach ($this->authorIds as $authorId) {
                $authorIdsValues[] = [(int) $authorId, $this->id];
            }
            Yii::$app->db->createCommand()->batchInsert(UserPublication::tableName(), ['user_id', 'public_id'], $authorIdsValues)->execute();
        }
        if (!empty($this->keywordNames)) {
            $keywordValues = [];
            foreach ($this->keywordNames as $keyword) {
                $existQuery = Keyword::find()->where(['keyword_name' => $keyword]);
                if (!$existQuery->exists()) {
                    $keywordModel = new Keyword();
                    $keywordModel->keyword_name = $keyword;
                    $keywordModel->save();
                    $keywordValues[] = [$this->id, $keywordModel->id];
                } else {
                    $existModel = $existQuery->one();
                    if (!in_array([$this->id, $existModel->id], $keywordValues)) {
                        $keywordValues[] = [$this->id, $existModel->id];
                    }
                }
            }
            Yii::$app->db->createCommand()->batchInsert(PublicationKeyword::tableName(), ['public_id', 'keyword_id'], $keywordValues)->execute();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function removeDir($dir) {
        if ($objs = glob($dir."/*")) {
            foreach($objs as $obj) {
                is_dir($obj) ? $this->removeDir($obj) : unlink($obj);
            }
        }
        rmdir($dir);
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'publication';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['public_type'], 'integer'],
            [['public_type', 'public_title', 'public_annotation', 'public_info', 'public_lang'], 'required'],
            [['public_annotation', 'public_info'], 'string'],
            [['public_title'], 'string', 'max' => 255],
            [['public_lang'], 'string', 'max' => 20],
            [['project_id'], 'exist', 'skipOnError' => true, 'targetClass' => Project::className(), 'targetAttribute' => ['project_id' => 'id']],
            [['month', 'year', 'keywordNames', 'authorIds'], 'safe'],
            [['month', 'year', 'keywordNames', 'authorIds'], 'required'],
            [['attach'], 'required', 'on' => 'create'],
            [['attach'], 'file', 'skipOnEmpty' => true, 'extensions' => 'doc, docx, pdf'],
        ];
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios['create'] = [
            'public_type',
            'public_title',
            'public_annotation',
            'public_info',
            'public_lang',
            'project_id',
            'month',
            'year',
            'keywordNames',
            'authorIds',
            'attach'
        ];
        $scenarios['update'] = [
            'public_type',
            'public_title',
            'public_annotation',
            'public_info',
            'public_lang',
            'project_id',
            'month',
            'year',
            'keywordNames',
            'authorIds',
            'attach'
        ];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'project_id' => 'Привязка к проекту (необязательно)',
            'public_date' => 'Дата публикации',
            'public_type' => 'Тип',
            'public_title' => 'Название',
            'public_annotation' => 'Аннотация',
            'public_info' => 'Источник публикации',
            'public_lang' => 'Язык',
            'public_file' => 'Прикрепить новый файл',
            'authorIds' => 'Авторы публикации',
            'keywordNames' => 'Ключевые слова',
            'month' => 'Месяц',
            'year' => 'Год',
            'attach' => 'Файл',
            'authors' => 'Авторы'
        ];
    }

    public function getTypeName() {
        return ArrayHelper::getValue(self::getTypesArray(), $this->public_type);
    }

    public static function getTypesArray() {
        return [
            self::TYPE_ARTICLE => 'Статья',
            self::TYPE_CHAPTER => 'Глава книги',
            self::TYPE_BOOK => 'Книга',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProject()
    {
        return $this->hasOne(Project::className(), ['id' => 'project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPublicationKeywords()
    {
        return $this->hasMany(PublicationKeyword::className(), ['public_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getKeywords()
    {
        return $this->hasMany(Keyword::className(), ['id' => 'keyword_id'])->viaTable('publication_keyword', ['public_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserPublications()
    {
        return $this->hasMany(UserPublication::className(), ['public_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthors()
    {
        return $this->hasMany(User::className(), ['id' => 'user_id'])
            ->viaTable('user_publication', ['public_id' => 'id']);
    }

    public function provideConnectedInfo() {
        $this->authorIds = ArrayHelper::getColumn($this->getAuthors()->all(), 'id');
        $this->keywordNames = ArrayHelper::getColumn($this->getKeywords()->all(), 'keyword_name');
    }

}
