<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "post".
 *
 * @property string $id
 * @property string $post_date
 * @property string $post_author_id
 * @property string $post_title
 * @property string $post_announce
 * @property string $post_desc
 * @property integer $post_type
 * @property string $post_views
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property User $author
 * @property PostStorage[] $storages
 * @property Tag[] $tags
 */
class Post extends ActiveRecord
{
    public $tagNames = [];
    public $filePaths = [];
    public $filesToBeDeleted = [];

    const STATUS_DRAFT = 0;
    const STATUS_COMMON = 1;
    const STATUS_TOP = 2;

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    public function beforeSave($insert)
    {
        $this->post_date = (new \DateTime($this->post_date . ':00'))->format('Y-m-d H:i:s');
        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        PostTag::deleteAll(['post_id' => $this->id]);
        $values = [];
        if (!empty($this->tagNames)) {
            foreach ($this->tagNames as $tag) {
                $existQuery = Tag::find()->where(['tag_name' => $tag]);
                if (!$existQuery->exists()) {
                    $tagModel = new Tag();
                    $tagModel->tag_name = $tag;
                    $tagModel->save();
                    $values[] = [$this->id, $tagModel->id];
                } else {
                    $existModel = $existQuery->one();
                    if (!in_array([$this->id, $existModel->id], $values)) {
                        $values[] = [$this->id, $existModel->id];
                    }
                }
            }
            Yii::$app->db->createCommand()->batchInsert(PostTag::tableName(), ['post_id', 'tag_id'], $values)->execute();
        }

        if(!empty($this->filesToBeDeleted)) {
            foreach ($this->filesToBeDeleted as $fileToBeDeleted) {
                $query = PostStorage::findOne(['id' => (int) $fileToBeDeleted, 'post_id' => $this->id]);
                $filePath = Yii::getAlias("@webroot") . ArrayHelper::getValue($query, 'storage_path');
                if (file_exists($filePath)) {
                    unlink($filePath);
                }
                $query->delete();
            }
            unset($this->filesToBeDeleted);
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'post';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['post_date', 'post_author_id', 'post_title', 'post_announce', 'post_desc', 'post_type'], 'required'],
            [['post_date'], 'date', 'format' => 'php:d.m.Y H:i'],
            [['tagNames', 'filesToBeDeleted'], 'safe'],
            [['post_author_id', 'post_type', 'post_views'], 'integer'],
            [['post_announce', 'post_desc'], 'string'],
            [['post_title'], 'string', 'max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'post_date' => 'Дата публикации',
            'post_author_id' => 'Post Author ID',
            'post_title' => 'Заголовок новости',
            'post_announce' => 'Анонс новости',
            'post_desc' => 'Текст новости',
            'post_type' => 'Тип',
            'post_views' => 'Post Views',
            'tagNames' => 'Темы',
            'updated_at' => 'Дата обновления',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['id' => 'post_author_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStorages()
    {
        return $this->hasMany(PostStorage::className(), ['post_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
            ->viaTable('post_tag', ['post_id' => 'id'])->orderBy(['id' => SORT_ASC]);
    }

    public function provideTagNames() {
        $this->tagNames = ArrayHelper::getColumn($this->getTags()->all(), 'tag_name');
    }

    public function getStatusName() {
        return ArrayHelper::getValue(self::getStatusesArray(), $this->post_type);
    }

    public static function getStatusesArray() {
        return [
            self::STATUS_DRAFT => 'Черновик',
            self::STATUS_COMMON => 'Обычная',
            self::STATUS_TOP => 'Важная',
        ];
    }

}
