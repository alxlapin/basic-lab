<?php

namespace app\models;

use Yii;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;
use yii\web\IdentityInterface;
use yii\web\UploadedFile;

/**
 * This is the model class for table "user".
 *
 * @property string $id
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $user_login
 * @property string $user_password
 * @property string $role
 * @property string $auth_key
 * @property string $user_name
 * @property string $user_surname
 * @property string $user_patronymic
 * @property string $user_email
 * @property string $user_phone
 * @property string $user_biography
 * @property string $user_resume
 * @property string $user_photo
 * @property string $user_acdegree
 * @property string $user_acrank
 * @property string $visibility
 *
 * @property Achievement[] $achievements
 * @property Job[] $jobs
 * @property Post[] $posts
 * @property UserInterest[] $userInterests
 * @property Interest[] $interests
 * @property UserProject[] $userProjects
 * @property Project[] $projects
 * @property UserPublication[] $userPublications
 * @property Publication[] $publics
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    const STATUS_HIDDEN = 0;
    const STATUS_VISIBLE = 1;

    const SCENARIO_UPDATE = 'update';

    /**
     * @var UploadedFile
     */
    public $resume;

    public $interestNames = [];

    /**
     * @inheritdoc
     */

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            if ($insert) {
                $this->generateAuthKey();
                $this->setPassword($this->user_password);
                if ($this->resume) {
                    $resumePath = '/documents/users/resume/' . uniqid(time()) . '.' . $this->resume->extension;
                    $this->resume->saveAs(Yii::getAlias("@webroot") . $resumePath);
                    $this->user_resume = $resumePath;
                }
            } else {
                if ($this->resume) {
                    $checkFile = Yii::getAlias("@webroot") . $this->user_resume;
                    if (file_exists($checkFile)) {
                        unlink($checkFile);
                    }
                    $resumePath = '/documents/users/resume/' . uniqid(time()) . '.' . $this->resume->extension;
                    $this->resume->saveAs(Yii::getAlias("@webroot") . $resumePath);
                    $this->user_resume = $resumePath;
                }
            }
            return true;
        }
        return false;
    }

    public function afterSave($insert, $changedAttributes)
    {
        UserInterest::deleteAll(['user_id' => $this->id]);
        $values = [];
        if (!empty($this->interestNames)) {
            foreach ($this->interestNames as $interest) {
                $existQuery = Interest::find()->where(['interest_name' => $interest]);
                if (!$existQuery->exists()) {
                    $interestModel = new Interest();
                    $interestModel->interest_name = $interest;
                    $interestModel->save();
                    $values[] = [$this->id, $interestModel->id];
                } else {
                    $existModel = $existQuery->one();
                    if (!in_array([$this->id, $existModel->id], $values)) {
                        $values[] = [$this->id, $existModel->id];
                    }
                }
            }
            Yii::$app->db->createCommand()->batchInsert(UserInterest::tableName(), ['user_id', 'interest_id'], $values)->execute();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function removeDir($dir) {
        if ($objs = glob($dir."/*")) {
            foreach($objs as $obj) {
                is_dir($obj) ? $this->removeDir($obj) : unlink($obj);
            }
        }
        rmdir($dir);
    }

//    public function afterSave($insert, $changedAttributes)
//    {
//        $auth = Yii::$app->authManager;
//        $auth->assign($auth->getRole($this->role), $this->id);
//
//        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
//    }

    public static function tableName()
    {
        return 'user';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_login', 'user_name', 'user_surname', 'user_patronymic', 'user_email'], 'required'],
            [['user_password'], 'required', 'except' => self::SCENARIO_UPDATE],
            [['user_password'], 'string', 'min' => 6],
            [['user_biography'], 'string'],
            [['user_login', 'user_name', 'user_surname', 'user_patronymic', 'user_acdegree', 'user_acrank'], 'string', 'max' => 45],
            [['role'], 'string', 'max' => 64],
            [['user_phone'], 'string', 'max' => 30],
            [['user_resume', 'user_photo'], 'string', 'max' => 255],
            [['user_login'], 'unique', 'targetClass' => self::className(), 'message' => 'This login has already been taken.'],
            [['visibility'], 'integer'],
            [['user_email'], 'email'],
            [['user_email'], 'unique', 'targetClass' => self::className(), 'message' => 'This email address has already been taken.'],
            [['user_email'], 'string', 'max' => 255],
            [['resume'], 'file', 'skipOnEmpty' => true, 'extensions' => 'doc, docx, pdf'],
            [['interestNames'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'created_at' => 'Создан',
            'updated_at' => 'Updated At',
            'user_login' => 'Логин',
            'user_password' => 'Пароль',
            'role' => 'Роль',
            'visibility' => 'Статус',
            'interestNames' => 'Профессиональные интересы',
            'user_name' => 'Имя',
            'user_surname' => 'Фамилия',
            'user_patronymic' => 'Отчество',
            'user_email' => 'E-mail',
            'user_phone' => 'Телефон',
            'user_biography' => 'Биография',
            'user_resume' => 'Резюме',
            'user_photo' => 'Фото',
            'user_acdegree' => 'Ученая степень',
            'user_acrank' => 'Ученое звание',
        ];
    }

    public function getStatusName() {
        return '';
    }

    public static function getStatusesArray() {
        return [
            self::STATUS_HIDDEN => 'Скрытый',
            self::STATUS_VISIBLE => 'Видимый',
        ];
    }

    public static function getDegrees() {
        return [
            'К.т.н.' => 'Кандидат технических наук',
            'Д.т.н.' => 'Доктор технических наук',
        ];
    }

    public static function getRanks() {
        return [
            'Доцент' => 'Доцент',
            'Профессор' => 'Профессор',
        ];
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAchievements()
    {
        return $this->hasMany(Achievement::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getJobs()
    {
        return $this->hasMany(Job::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPosts()
    {
        return $this->hasMany(Post::className(), ['post_author_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserInterests()
    {
        return $this->hasMany(UserInterest::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInterests()
    {
        return $this->hasMany(Interest::className(), ['id' => 'interest_id'])->viaTable('user_interest', ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserProjects()
    {
        return $this->hasMany(UserProject::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProjects()
    {
        return $this->hasMany(Project::className(), ['id' => 'project_id'])->viaTable('user_project', ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserPublications()
    {
        return $this->hasMany(UserPublication::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPublics()
    {
        return $this->hasMany(Publication::className(), ['id' => 'public_id'])->viaTable('user_publication', ['user_id' => 'id']);
    }

    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id]);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('findIdentityByAccessToken is not implemented.');
    }

    public function getId()
    {
        return $this->getPrimaryKey();
    }

    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    public function getAuthKey()
    {
        return $this->auth_key;
    }

    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    public static function findByUserlogin($userlogin)
    {
        return static::findOne(['user_login' => $userlogin]);
    }

    public function setPassword($password)
    {
        $this->user_password = Yii::$app->security->generatePasswordHash($password);
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->user_password);
    }

    public static function getFullNames() {
        $arr = self::find()->asArray()->all();
        $arr2 = [];
        foreach ($arr as $key => $value) {
            $arr2[$value['id']] = $value['user_surname'] . ' ' . $value['user_name'] . ' ' . $value['user_patronymic'];
        }
        return $arr2;
    }

    public function getFullName() {
        $name = $this->user_surname . ' ' . mb_substr($this->user_name, 0 , 1) . '.' . mb_substr($this->user_patronymic, 0 , 1) . '.';
        return $name;
    }

    public function provideInterests() {
        $this->interestNames = ArrayHelper::getColumn($this->getInterests()->all(), 'interest_name');
    }

}
